import _file_.modelv0._

val replications = Replication(
    evaluation = model, // the model to run
    seed = mySeed,         // the seed variable
    sample = 20,           // the number of model executions
    aggregation = Seq(om_sumBiomass aggregate median, om_capital_moyen_1 aggregate median,
                      om_capital_moyen_2 aggregate median, om_capitalTotal aggregate median  )
)


// it's replication how is evaluated in the model
val sensitivAnalyse = SensitivitySaltelli(
      evaluation = replications,
      inputs = Seq(
          nbBoats in (10.0, 500.0),
          LongueurFilet in (1000.0, 3000.0),
          LongueurFiletEtrangers in (1000.0, 3000.0),
          SortieSemaine in (1.0, 6.0),
       //   ZonesExclusionPeche in (true, false),
          ReserveIntegrale in (0.0, 12.0),
          PrixPoisson in (1000.0,3000.0),
          CoutMaintenance in (1000.0,5000.0)
        ),
      outputs = Seq(om_sumBiomass, om_capitalTotal),
      sample = 100 // 7 parametres x 10 chemins le nombre de trajectoir est r de k+1  campolongo et al. 2007, An effective screening design for sensitivity analysis of large models
      //level = 10
    ) hook (workDirectory / "results_saltelli")



val muse = SLURMEnvironment(
    "delaye",
    "muse-login.hpc-lr.univ-montp2.fr",
    // optional parameters
    partition = "agap_normal", // can be agap_short agap_normal agap_long
    workDirectory = "/lustre/delaye/openmole",
    //workDirectory = "/home/delaye/scratch/openmole",
    sharedDirectory = "/storage/replicated/cirad_users/delaye/openmole",
    time = 1 hours
  )

val local = LocalEnvironment(1)
//sensitivAnalyse on muse by 20

sensitivAnalyse on muse by 50